---
title: "Joining Mini-Lab"
output:
  html_document:
    toc: true
    toc_float: true
    number_sections: true
    df_print: paged
    css: ../../../styles.css
  pdf_document: default
---

**Duration: 30 minutes** 

# run libraries at start

```{r}
library(tidyverse)
library(readxl)
library(skimr)
```



# MVP

## Data Investigation
<br>
**Question 1.**  
Read the files "actors.csv", "movies.csv" and "roles.csv" into R.  You might get warnings here - don't worry the data is okay for what we are trying to do.

```{r}
#loading in data
actors_data <- read_csv("data/actors.csv", show_col_types = FALSE)
movies_data <- read_csv("data/movies.csv", show_col_types = FALSE)
roles_data <- read_csv("data/roles.csv", show_col_types = FALSE)
```


```{r}
view(actors_data)
view(movies_data)
view(roles_data)
```


<br>

**Question 2.**

* What are the primary keys and the foreign keys for each data frame?
primary key
Actors = ID
Movies = ID
Roles data = role (role is unique in this dataset)


foreign key
Actors = ID with Roles data
Movies = name with Roles data
Roles data = actor ID and movie ID

* What kind of relationship (one-to-one, one-to-many, many-to-many) is there between
  * actors and roles one-to-many
  * movies and roles one-to-many
  * actors and movies many-to-many

Write these as comments/text in your R Notebook.

<br>

## Little Mermaid, The

**Question 1.**  
From the movies table, find the id of the film The Little Mermaid. (In the data as "Little Mermaid, The").


```{r}
movies_data %>% 
filter(name == "Little Mermaid, The") %>% 
select(id)
```


<br>

**Question 2.**  
Filter the roles data frame, so we just have roles from the Little Mermaid (hint: use the ID you found in the last question). Save the result as `little_mermaid_roles`.

```{r}
little_mermaid_roles <- filter(roles_data, movie_id == 192017)
view(little_mermaid_roles)
```


<br>

**Question 3.**  
Carry out a left join on this new data frame and the actors data frame, to find the actors which appeared in The Little Mermaid.


```{r}
left_join(little_mermaid_roles, actors_data, c("actor_id" = "id"))
 
```



<br>

**Question 4.**  
Do the last join, but with an inner join instead. Is the data different? Why is that?
No differences as each actor ID in The Little Mermaid has corresponding data from the actor dataset to be joined to. 

```{r}
inner_join(little_mermaid_roles, actors_data, c("actor_id" = "id"))
```


<br>

## Actors in more than one film

**Question 1.**  
For all actors who have appeared in at least two films. Call this data frame `actors_more_than_once`.


```{r}
actors_more_than_once  <- filter(actors_data, film_count >= 2)
actors_more_than_once 
view(actors_more_than_once) 
```


<br>

**Question 2.**  
Left join `actors_more_than_once` to `roles`, so we can see all the actors roles those actors played in. 

```{r}
actors_more_than_once_roles <- left_join(actors_more_than_once, roles_data, c("id" = "actor_id"))
view(actors_more_than_once_roles)
```


<br>

**Question 3.**  
Left join the result from above to movies, so we can see details of each movie for these roles

```{r}
actors_more_than_once_roles_mov <- left_join(actors_more_than_once_roles, movies_data, c("movie_id" = "id"))
view(actors_more_than_once_roles_mov)
```

or combining 2 joins from Q2 and Q3

```{r}
actors_more_than_once %>% 
  left_join(roles_data, c("id" = "actor_id")) %>% 
  left_join(movies_data, c("movie_id" = "id"))
```


**Question 4.**  
For each actor, find the average rating of the films they appeared. Find the five actors with the highest average rank of films they appeared in.


```{r}
average_rating <- actors_more_than_once %>% 
  left_join(roles_data, c("id" = "actor_id")) %>% 
  left_join(movies_data,c("movie_id" = "id" )) %>% 
    mutate(rank = as.numeric(rank)) %>% 
    group_by(first_name, last_name) %>% 
  summarise(average_rank = mean(rank, na.rm = TRUE)) %>% 
arrange(desc(average_rank)) %>% 
  head(n = 5) # only shows top 5 entries exactly, regardless of whether there are 5 unique average rank scores i.e. if an average rank score tie, then counted as two 

mutate(actor_full_name = paste(first_name, last_name), 
       .after = last_name)
group_by(actor_full_name) %>% 
  summarise(avg_rating)


group_by(id) %>% 
  summarise(avg_rating - mean(rank)) # remove NA's here

average_rating

```




```{r}
#FINAL ANSWER
actors_more_than_once %>% 
  left_join(roles_data, c("id" = "actor_id")) %>% 
  left_join(movies_data, c("movie_id" = "id")) %>% 
  mutate(rank = as.numeric(rank)) %>% 
  group_by(first_name, last_name) %>% 
  summarise(average_rank = mean(rank, na.rm = TRUE)
            ) %>% 
      ungroup () %>% 
      slice_max(average_rank, n=5)

```


## The Busiest Actor

**Question 1.**  
Find the actor who has appeared in most films. List the films they appeared in, the year the film was released and their role in the film.

```{r}
actors_data %>% 
  arrange(desc(film_count))
```

```{r}
# ID 22591
most_films <- filter(actors_data, id == 22591) %>% 
  left_join(roles_data, c("id" = "actor_id")) %>% 
  left_join(movies_data, c("movie_id" = "id")) %>% 
  arrange(year) %>% 
  select("Film title" = name, "Film release date" = year, "Kevin Bacon's role" = role)


most_films

```


```{r}
#kevin Bacon actor ID= 22591

movies_data %>% 
  left_join(roles_data, c("id" = "movie_id")) %>% 
  filter(actor_id=="22591") %>% 
  select(name,year,role) %>% 
  arrange(year)


```


