---
title: "R Notebook"
output: html_notebook
---

install.packages(), you do once per package
library() - you do one each session

useful to have all packages you're going to use in the same chunk at the start
```{r}
library(tidyverse)
library(CodeClanData)
library(readxl)
library(skimr)
```


```{r}
install.packages(c('here', 'skimr', 'readxl'))
```

```{r}
install.packages('remotes')
remotes::install_github('codeclan/CodeClanData')
```

```{r}
dog_bites <- read_csv('data/dog_bites.csv')
```

```{r}
seedmix <- read_excel('data/edinburgh_seedmix.xlsx')
seedmix_north <- read_excel('data/edinburgh_seedmix.xlsx', sheet = 3)


seedmix
seedmix_north
```

what sheets are in the workbook
```{r}
excel_sheets('data/edinburgh_seedmix.xlsx')


seedmix_north <- read_excel('data/edinburgh_seedmix.xlsx', sheet = "North Neighbourhood")
```


csv = comma separated values
```{r}
iris
write_csv(iris, 'data/iris.csv')
```

tsv = tab separated values
```{r}
indie_bands <- read_tsv('data/indie_bands.txt')
```

Absolute path to your project
```{r}
here::here()
```

Relative path, relative to the closest '.Rproj' file
This setup allows us to share the entire project directories with collaborators
```{r}
#here::here('data/beer.txt)
```

```{r}
data <- read_csv(here::here('data/dog_bites.csv'))
```


dplyr = part of the tidyverse

tidyverse = tool for analysis


```{r}
library(tidyverse)
library(CodeClanData)
```


what are the packages in tidyverse
```{r}
tidyverse ::tidyverse_packages()
tidyverse_logo()
tidyverse_conflicts()
```
tidyverse filter will overwrite R filter


```{r}
students
all_deaths
```

##Base R data familiarisation function

```{r}
nrow(all_deaths) #number of rows in all_deaths data
ncol(all_deaths) #number of columns in all_deaths data 
dim(all_deaths)  #dimensions of all_deaths data

names(all_deaths) #column names
all_deaths
```

```{r}
head(iris)
head(iris, n = 10)

```
```{r}
all_deaths
glimpse(all_deaths)
```
<chr> = 'character' is what R calls words
<dbl> = 'double' is what R calls numbers that might have decimal places 

```{r}
view(all_deaths)
```

```{r}
library(skimr)

skim(all_deaths)
```

skim separates out character and numeric values

```{r}
?skim
```

First wrangling function
select() is for selecting specific columns
in all (actually most) tidyverse functions the first argument is the data
(for "argument" you can think placeholder)
(for "parameter" you can think placeholder)

```{r}
select(all_deaths, name, allegiances)
select(all_deaths, name, allegiances, gender)
select(all_deaths, -name) # - removes the name column
select(all_deaths, -name, -allegiances)

deaths_with_no_names <- select(all_deaths, -name)
deaths_with_no_names

view(all_deaths)

```

1. Select all columns which relate to a book
Select the columns which are related to some kind of death

```{r}
select(all_deaths, -name, -allegiances, -year_of_death, -gender, -nobility)
#or
deaths_with_book <- select(all_deaths, starts_with("book"), death_chapter)
#puts death chapter first
deaths_with_book <- select(all_deaths, death_chapter, starts_with("book"))

deaths_with_book <- select(all_deaths, contains("death"))

```


Selecting rows 'filter' filter()
This works on logical conditions
```{r}
all_deaths

filter(all_deaths, allegiances == 'Lannister')
filter(all_deaths, allegiances != 'Lannister') # not equal to Lannister
filter(all_deaths, year-of-death >= 300)
filter(all_deaths, gender == 0)

filter(all_deaths, allegiances == 'None')

```

== : tests if two things are equal (must use == for checking for equality) Must be exact i.e. upper/lower case match
!= : tests if two things are not equal 

< : tests if the left is less than the right
> : tests if the left is greater than the right
<= : tests if the left is less than or equal to the right
>= : tests for greater than or equal to 

! : NOT - negates the operator after i.e. does the opposite
& : AND - only returns rows when both sides are true
| : OR - returns rows when either side is true

%in% : tests for membership - is the item on the left hand side the same as the item on the right hand side

if you have more than one value on the left hand side, you must use %in%, not ==
for example
```{r}
c('d', 'a') %in% c('a', 'b', 'c', 'd')
```


```{r}
filter(all_deaths, allegiances == 'Lannister' & gender == 1)
filter(all_deaths, allegiances == 'Lannister' | allegiances == 'House Stark')
```
```{r}
TRUE | TRUE
TRUE | FALSE
FALSE | TRUE
FALSE | FALSE
```

Find where the year_of_death is less than or equal to 299.
```{r}
filter(all_deaths, year_of_death <= 299)
```

Find just the data for the characters “Jon Snow”, “Daenerys Targaryen” and “Samwell Tarly”.
```{r}
filter(all_deaths, name == 'Jon Snow' | name == 'Daenerys Targaryen' | name == 'Samwell Tarly')
#or 
filter(all_deaths, name %in% c("Jon Snow", "Daenerys Targaryen", "Samwell Tarly"))

```

Find the females (gender is 0) who are not Lannisters and only return these characters names. Hint You will need to combine both of the dplyr verbs we have learned.
```{r}
non_lannister_women <- filter(all_deaths, gender == 0 & allegiances != "Lannister")
select(non_lannister_women, name)
```

or

```{r}
select(filter(all_deaths, gender == 0 & allegiances != "Lannister"), name)

```

Ctrl + Shift + M
%>% 
it works by placing the LHS into the first placeholder of the RHS function

Pipe operator
select(filter(all_deaths, gender == 0 & allegiances != "Lannister"), name)

pipe operator places dataset in functions.
```{r}
all_deaths %>% 
  filter(gender == 0 & allegiances != "Lannister") %>% 
  select(name)
```

%>%  = like an "and then" statement.Takes output from first statement and continues with this output for the next function.


Arranging our data
arrange()

```{r}
all_deaths %>% 
  arrange(gender)

all_deaths %>% 
  arrange(book_intro_chapter)


all_deaths %>% 
  arrange(name)

all_deaths %>% 
  arrange(desc(name)) # descending name order
```
arrange sorts in ascending order by default, if you want descending order use desc()


```{r}
all_deaths %>% 
  arrange(allegiances, desc(name))
```


Mutate for creating new columns mutate() and also for modifying existing columns


[Using help files]

1. description
2. usage
.data, = name of the placeholders
...= indicates it will take many arguments
.before = placeholder
.after = placeholder
3. Arguments = explains what each of the arguments expects

Examples at the bottom of the help files, can be used (most helpful)


```{r}
df <- tibble(x = 1, y = 2)
df %>% mutate(z = x + y)
```


```{r}
all_deaths %>% 
  mutate(years_survived = year_of_death - 298,
         .after = year_of_death) %>% 
  arrange(desc(years_survived))
```

Create a new column that multiplies the book of death by 5, placed before the column year of death and filter for less than 20

```{r}
all_deaths %>% 
  mutate(book_of_death_times_5 = book_of_death * 5,
         .before = year_of_death) %>% 
  filter(book_of_death_times_5 < 20)
```

.before = comes from helpfile
.after = comes from helpfile

write_csv(book_of_death_df, 'filename.csv') - example of how to save version when using mutate to create a column

SUMMARY
1. select, select() = chooses columns
2. filter, filter () = chooses rows based on TRUE/ FALSE - logical conditions
3. arrange, arrange () = arranges items in ascending order (by default), use desc() to descend
4. mutate, mutate() = modifies existing columns and adds new columns

5. summarise, summarise() = creates a one line summary
6. group by, group_by() = partitions the data into groups based on some categories

#here is comment ----

#another comment ----

```{r}

```


```{r}
all_deaths
```

new column by default puts column at the end
```{r}
all_deaths %>% 
  mutate(years_survived = year_of_death - 298, 
         .after = year_of_death)
```


```{r}
all_deaths %>% 
  mutate(years_survived = year_of_death - 298, 
         .after = year_of_death) %>% 
mutate(years_survived = years_survived * 100)
```

is.na()

```{r}
is.na(c(1, 2, 3, NA, 4, 5, NA, 6))
```
```{r}
all_deaths %>% 
  mutate(year_of_death = is.na(year_of_death))


all_deaths %>% 
  mutate(is_alive = is.na(year_of_death),
         .after = year_of_death)
```

```{r}
glimpse(all_deaths)
```


### Type conversion
numeric
double: has decimal component
integer: whole numbers
character: words / letters / or numbers pretending to be letters e.g. 1 is different from “1”
logical: TRUE / FALSE. Sometimes 1 / 0
factor: Creates a category

Each of these types has a conversion function which looks like as.****() 

3 into "3"

```{r}
all_deaths %>% 
  mutate(book_of_death = as.character(book_of_death)) %>% 
  glimpse()



## R has tried to convert text to number, rather than error it returns NA
all_deaths %>% 
  mutate(name = as.numeric(name)) 



all_deaths %>% 
  mutate(nobility = as.logical(nobility)) 


```

REMOVING na
```{r}
numbers <- c(1:10, NA)
mean(numbers, na.rm = TRUE) # IF NA remove, true = remove NA values
```



```{r}
all_deaths %>% 
  mutate(average_year_of_death = mean(year_of_death, na.rm = TRUE),
         .after = year_of_death)
```

Add a _new column _which is a logical vector, which has TRUE if book_intro_chapter is empty, and FALSE if it isn’t. Hint: you’ll need to use the is.na function.

```{r}
all_deaths %>%
  mutate (empty_book_intro = is.na(book_intro_chapter),
          .after = book_intro_chapter) 
```


Change the nobility column to a logical vector.

```{r}
all_deaths %>% 
  mutate(nobility = as.logical(nobility)) 
```

Find the number of male characters by taking the sum of the gender column (as gender = 1 is male).
```{r}
all_deaths %>% 
  mutate (male_sum = sum(gender, na.rm = TRUE),
          .after = gender)
```

##summarise function
will create a one line summary based on the function we use

```{r}
sum(select(all_deaths, gender))

all_deaths %>% 
  summarise(male_sum = sum(gender))
```


```{r}
all_deaths %>% 
  summarise(female_sum = sum(gender == 0))
```


```{r}
all_deaths %>% 
  summarise(allegiances = sum(allegiances == 'None'))
```


```{r}
nrow(all_deaths)

all_deaths %>% 
  summarise(n_rows = n())
```


##group by
produces no visible change

n() = counts the rows in the summary
    if the rows are grouped, we get a per group summary

```{r}
all_deaths %>% 
  select(name, gender)


all_deaths %>% 
  select(name, gender) %>% 
group_by(gender) %>% 
  summarise(gender_count = n())


all_deaths %>% 
  select(name, allegiances) %>% 
group_by(allegiances) %>% 
  summarise(allegiances_count = n())

```

#only retains the columns you have asked it to count (i.e. group)

```{r}
all_deaths %>% 
  select(name, nobility, gender) %>% # not really needed 
group_by(nobility, gender) %>% 
summarise(character_count = n())
```


##pull()
```{r}
all_deaths %>% 
  select(name, nobility, gender) %>% # not really needed 
group_by(gender) %>% 
summarise(character_count = n()) %>% 
  select(character_count)


all_deaths %>% 
  select(name, nobility, gender) %>% # not really needed 
group_by(gender) %>% 
summarise(character_count = n()) %>% 
  select(character_count) %>% 
  pull(character_count)

```


```{r}
sum(select(all_deaths, gender))

all_deaths %>% 
  select(gender) %>% 
  summarise(character_count = sum(gender)) %>% 
  pull(character_count)
  
```
#summarise has no name so takes name of what functionis doing i.e. sum of gender
```{r}
all_deaths %>% 
  select(gender) %>% 
  summarise(sum(gender))
```



